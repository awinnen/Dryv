@using Dryv
@using Dryv.Extensions
@using Newtonsoft.Json
@model DryvDemo.ViewModels.HomeViewModel

<html>
<head>
</head>
<body>
    <div id="app">
        <form method="post" v-on:submit.prevent="submit">
            <fieldset>
                <div>
                    <label>Name: </label>
                    <input v-model="name" name="name" type="text">
                    <span>{{ errors.name }}</span>
                </div>
                <div>
                    <label>Company: </label>
                    <input v-model="company" name="company" type="text">
                    <span>{{ errors.company }}</span>
                </div>
                <div>
                    <label>Tax ID:</label>
                    <input v-model="taxId" name="taxId" type="text">
                    <span>{{ errors.taxId }}</span>
                </div>
            </fieldset>
            <fieldset>
                <div>
                    <label>IsAddressVisible: </label>
                    <input v-model="isAddressVisible" name="isAddressVisible" type="checkbox">
                </div>
                <div>
                    <label>PostalCode: </label>
                    <input v-model="postalCode" name="postalCode" type="text">
                    <span>{{ errors.postalCode }}</span>
                </div>
                <div>
                    <label>City: </label>
                    <input v-model="city" name="city" type="text">
                    <span>{{ errors.city }}</span>
                </div>
            </fieldset>
            <fieldset>
                <button type="button" @@click="submit">Absenden</button>
            </fieldset>
        </form>
    </div>
    
    <script src="/js/home.js"></script>
<script>
    var vue = new Vue.default({
        el: "#app",
        data: {
            errors: {
                @Html.Raw(string.Join(",\n", Html.ViewData.ModelMetadata.Properties.Select(p => $"{p.PropertyName.ToCamelCase()}: null")))
            },
            @Html.Raw(JsonConvert.SerializeObject(this.Model).TrimStart(' ', '{').TrimEnd(' ', '}'))
        },
        validations: {
            @Html.Raw(string.Join(",\n", from val in Html.GetDryvClientPropertyValidations()
                                              let field = val.Property.Name.ToCamelCase()
                                              select $@"{field}: {{ function(){{ return this.validate('{field}', {val.ValidationFunction}); }} }}"))
        },
        methods: {
            validate(field, func) {
                var v = func.call(this, this);
                return v && v.then ? v.then(r => !!(this.errors[field] = r)) : !!(this.errors[field] = v);
            },
            ajax(url, msg) {
                return this.$http.get(url).then(response => response.body === true ? null : msg);
            },
            submit() {
                this.$v.$touch();
                if (!this.$v.$invalid) {
                    alert("Weeeee");
                }
            }
        }
    });
</script>
</body>
</html>