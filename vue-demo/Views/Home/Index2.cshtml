@using Dryv
@using Dryv.Extensions
@model DryvDemo.ViewModels.HomeViewModel

<html>
<head>
</head>
<body>
    <div id="app">
        <form method="post" @@submit.prevent="submit">
            <fieldset>
                <div>
                    <label>Name: </label>
                    <input v-model="model.name" name="name" type="text">
                </div>
                <div>
                    <label>Company: </label>
                    <input v-model="model.company" name="company" type="text">
                </div>
                <div>
                    <label>Tax ID:</label>
                    <input v-model="model.taxId" name="taxId" type="text">
                </div>
            </fieldset>
            <fieldset>
                <div>
                    <label>IsAddressVisible: </label>
                    <input v-model="model.isAddressVisible" name="isAddressVisible" type="checkbox">
                </div>
                <div>
                    <label>PostalCode: </label>
                    <input v-model="model.postalCode" name="postalCode" type="text">
                </div>
                <div>
                    <label>City: </label>
                    <input v-model="model.city" name="city" type="text">
                </div>
            </fieldset>
            <fieldset>
                <div>
                    <label>Child.Name2: </label>
                    <input v-model="model.child.name2" name="child.name2" type="text">
                </div>
                <div>
                    <label>Child.Child.Name3: </label>
                    <input v-model="model.child.child.name3" name="child.child.name3" type="text">
                </div>
            </fieldset>
            <fieldset>
                <button type="button" @@click="submit">Absenden</button>
            </fieldset>
        </form>
    </div>

    <script src="/js/home.js"></script>
    <script>
/*
                    @Html.Raw(string.Join(",\n", from val in Html.GetDryvClientValidation()
                        let field = val.Property.Name.ToCamelCase()
                        select $"{field}: {val.ValidationFunction}(model)"))
                        */
        var vue = new Vue.default({
            el: "#app",
            data: {
                model: {
                    @Html.Raw(string.Join(",\n", from property in Html.ViewData.ModelMetadata.Properties
                                                 let field = property.PropertyName.ToCamelCase()
                                                 where field != "child"
                                                 select $"{field}: {(property.IsCollectionType ? "[]" : "null")}")),
                    child: {
                        name2: null,
                        child: {
                            name3: null
                        }
                    }
                }
            },
            validations: {
                 @Html.Raw(string.Join(",\n", from val in Html.GetDryvClientValidation()
                        let field = val.Property.Name.ToCamelCase()
                        select $"{field}:  {{ function(_){{ return {val.ValidationFunction}(this); }} }}"))
            }, 
            methods: {
                submit() {
                    console.log('submit!')
                    this.$v.$touch();
                    if (this.$v.$invalid) {
                        this.submitStatus = 'ERROR'
                    } else {
                        // do your submit logic here
                        this.submitStatus = 'PENDING'
                        setTimeout(() => {
                        this.submitStatus = 'OK'
                        }, 500)
                    }
                }
            }
        });
    </script>
</body>
</html>