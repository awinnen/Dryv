@using Dryv.AspNetCore
@using Dryv.Extensions
@using Dryv.SampleVue.Models

@model HomeModel

<html>
<head>
    <title>Form validation with VueJS and Dryv.</title>
    <link rel="stylesheet" href="styles.css" />
    <link href="https://fonts.googleapis.com/css2?family=Dosis:wght@200;400;700&family=Roboto:wght@300&display=swap" rel="stylesheet">
</head>
<body>

    <script>
        var dryv = window.dryv || (window.dryv = {});
        if (!dryv.validateAsync) {
            dryv.validateAsync = async function(baseUrl, method, data) {
                const isGet = method === 'GET';
                const url = isGet ? baseUrl + "?" + Object.keys(data).map(k => `${k}=${encodeURIComponent(data[k])}`).join('&') : baseUrl;
                const response = isGet ? await axios.get(url) : await axios.post(url, data);

                return response.data && response.data.text;
            }
        }

        (function(dryv) {
            dryv.validators = {
                @Html.Raw(string.Join(",\n", from val in Html.GetDryvClientPropertyValidations()
                                                         where !string.IsNullOrWhiteSpace(val.ValidationFunction)
                                                        let field = val.Property.Name.ToCamelCase()
                                                        let sep = string.IsNullOrWhiteSpace(val.ModelPath) ? string.Empty : "."
                                                        select $@"""{val.ModelPath}{sep}{field}"": {val.ValidationFunction}"))
            };
            dryv.disablers = {
                @Html.Raw(string.Join(",\n", from val in Html.GetDryvClientPropertyValidations()
                                                         where !string.IsNullOrWhiteSpace(val.DisablingFunction)
                                                         let field = val.Property.Name.ToCamelCase()
                                                         let sep = string.IsNullOrWhiteSpace(val.ModelPath) ? string.Empty : "."
                                                         select $@"""{val.ModelPath}{sep}{field}"": {val.DisablingFunction}"))
            };
        })(window.dryv);
    </script>

    <div id="app">
        <h1>Form validation with VueJS and Dryv.</h1>
        <form v-on:submit="validateForm" method="post">
            <div class="form-content">
                <div class="form-block">
                    <h3>Personal Data</h3>

                    <form-input name="person.firstName" label="First name" v-model="person.firstName"></form-input>
                    <form-input name="person.lastName" label="Last name" v-model="person.lastName"></form-input>
                </div>

                <div class="form-block">
                    <h3>Shipping Address</h3>

                    <form-input name="shippingAddress.zipCode" label="ZIP code" v-model="shippingAddress.zipCode"></form-input>
                    <form-input name="shippingAddress.city" label="City" v-model="shippingAddress.city"></form-input>
                </div>

                <div class="form-block">
                    <h3>Billing Address</h3>

                    <div class="form-item">
                        <label for="billingAddress-deactivate">Billing address equals shipping address.</label>
                        <input id="billingAddress-deactivate" type="checkbox" v-model="billingEqualsShipping">
                    </div>

                    <div v-show="!billingEqualsShipping">
                        <form-input name="billingAddress.zipCode" label="ZIP code" v-model="billingAddress.zipCode"></form-input>
                        <form-input name="billingAddress.city" label="City" v-model="billingAddress.city"></form-input>
                    </div>
                </div>
            </div>
            <div class="form-block">
                <input type="submit" value="Submit">

                <div v-if="isValid === true" class="validation-feedback" style="background-color: lightgreen">
                    Valid
                </div>

                <div v-if="isValid === false" class="validation-feedback" style="background-color: #F88C30">
                    Invalid
                </div>
            </div>
        </form>
    </div>

    <script type="text/x-template" id="form-input">
        <div class="form-item">
            <div>
                <div class="form-input-label">
                    <label :for="name">{{ label }}</label>
                </div>
                <div class="form-input-control">
                    <input :id="name" v-bind:value="value" v-on:input="$emit('input', $event.target.value)">
                </div>
            </div>
            <div class="form-item-error" v-if="error">{{ error }}</div>
        </div>
    </script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/vue/2.6.11/vue.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.19.2/axios.min.js"></script>
    <script>
        Vue.component('form-input',
            {
                props: ['value', 'type', 'name', 'label'],
                template: '#form-input',
                data() {
                    return {
                        error: null
                    }
                },
                created() {
                    const validator = window.dryv.validators[this.name];
                    if (!validator) return;

                    const formValidators = this.$parent.formValidators || (this.$parent.formValidators = []);
                    const name = this.name;
                    formValidators.push({
                        validate: async (disabledFields) =>
                            this.error = (!disabledFields || disabledFields.filter(f => name.indexOf(f + ".") >= 0).length === 0) &&
                            await validator(this.$parent),
                        setError: errors => this.error = errors[name]
                    });
                }
            });

        const app = new Vue({
            el: '#app',
            data: {
                isValid: null,
                billingEqualsShipping: true,
                person: {
                    firstName: null,
                    lastName: null
                },
                shippingAddress: {
                    zipCode: null,
                    city: null
                },
                billingAddress: {
                    zipCode: null,
                    city: null
                }
            },
            methods: {
                async validateForm(e) {
                    e.preventDefault();
                    const disablers = dryv.disablers;
                    const disabledFields = [];
                    if (dryv.disablers) {
                        for (let field of Object.keys(disablers)) {
                            const disabler = disablers[field];
                            if (disabler && await disabler(this.$data)) {
                                disabledFields.push(field);
                            }
                        }
                    }

                    if (this.formValidators) {
                        let errors = 0;

                        for (let v of this.formValidators) {
                            if (await v.validate(disabledFields)) {
                                errors++;
                            }
                        }

                        this.$data.isValid = !errors;

                        if (!this.$data.isValid) {
                            return;
                        }
                    }

                    const result = axios.post(window.location.href, this.$data);

                    if (!this.formValidators) {
                        return;
                    }

                    this.$data.isValid = result.data.success;

                    if (!this.$data.isValid) {
                        this.formValidators.forEach(v => v.setError(result.data.errors));
                    }
                }
            }
        });
    </script>
</body>
</html>