@using Dryv.SampleVue.Models

@model HomeModel

<html>
<head>
    <title>Form validation with VueJS and Dryv.</title>
    <link rel="stylesheet" href="styles.css" />
    <link href="https://fonts.googleapis.com/css2?family=Dosis:wght@200;400;700&family=Roboto:wght@300&display=swap" rel="stylesheet" />
</head>
<body>
    <dryv-client-rules name="demo-form"/>
    <div id="app" v-dryv-set="'demo-form'">
        <h1>Form validation with Vue.js and Dryv.</h1>
        <form v-on:submit="validateForm" method="post">
            <div class="form-content">
                <div class="form-block">
                    <h3>Personal Data</h3>

                    @*<dryv-group v-groups='{"name": "nameError"}'>*@
                    <form-input label="First name" v-model="person.firstName"></form-input>
                    <form-input label="Last name" v-model="person.lastName"></form-input>

                    @*{{ nameError }}
                        </dryv-group>*@
                </div>

                <div class="form-block">
                    <h3>Shipping Address</h3>

                    <form-input label="ZIP code" v-model="shippingAddress.zipCode"></form-input>
                    <form-input label="City" v-model="shippingAddress.city"></form-input>
                </div>

                <div class="form-block">
                    <h3>Billing Address</h3>

                    <div class="form-item">
                        <label for="billingAddress-deactivate">Billing address equals shipping address.</label>
                        <input id="billingAddress-deactivate" type="checkbox" v-model="billingEqualsShipping" />
                    </div>

                    <div v-show="!billingEqualsShipping">
                        <form-input label="ZIP code" v-model="billingAddress.zipCode"></form-input>
                        <form-input label="City" v-model="billingAddress.city"></form-input>
                    </div>
                </div>
            </div>
            <div class="form-block">
                <input type="submit" value="Submit" />

                <div v-if="isValid === true" class="validation-feedback" style="background-color: lightgreen">
                    Valid
                </div>

                <div v-if="isValid === false" class="validation-feedback" style="background-color: #F88C30">
                    Invalid
                </div>
            </div>
        </form>
    </div>

    <script type="text/x-template" id="form-input">
        <div class="form-item" v-dryv>
            <div>
                <div class="form-input-label">
                    <label>{{ label }}</label>
                </div>
                <div class="form-input-control">
                    <input v-bind:value="value" v-on:input="$emit('input', $event.target.value)">
                </div>
            </div>
            <div class="form-item-warning" v-if="warning">{{ warning }}</div>
            <div class="form-item-error" v-if="error">{{ error }}</div>
        </div>
    </script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/vue/2.6.11/vue.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.19.2/axios.min.js"></script>
    <script src="dryvue.js"></script>
    <script>
        Vue.use(Dryvue,
            {
                get: axios.get,
                post: axios.post
            });

        Vue.component('form-input',
            {
                props: ['value', 'type', 'name', 'label'],
                template: '#form-input',
                data() {
                    return {
                        error: null,
                        warning: null
                    };
                }
            });

        const app = new Vue({
            el: '#app',
            data: {
                isValid: null,
                lastValidationWarning: null,
                billingEqualsShipping: true,
                person: {
                    firstName: null,
                    lastName: null
                },
                shippingAddress: {
                    zipCode: null,
                    city: null
                },
                billingAddress: {
                    zipCode: null,
                    city: null
                }
            },
            methods: {
                async validateForm(e) {
                    e.preventDefault();
                    this.isValid = true;
                    const validation = await this.$dryv.validate();

                    if (!validation.hasErrors && (!validation.hasWarnings || validation.warningHash === this.lastValidationWarning)) {
                        const result = await axios.post(e.srcElement.action, this.$data);
                        this.isValid = this.$dryv.setValidationResult(result.data.messages);
                        this.lastValidationWarning = null;
                    } else {
                        this.isValid = false;
                        this.lastValidationWarning = validation.warningHash;
                    }
                }
            }
        });
    </script>
</body>
</html>